{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Home Welcome to Minetest Community Docs! Here, you can find community-made documentations for Minetest, a free and open-source game(engine?). Contributing Feel free to make pull requests if you found any problem with the documentations. The source codes are written in Markdown so making changes should be easy. Changes will automatically become visible on the site shortly after being merged. You can also discuss about the documentations here . Useful links Official Minetest website: http://www.minetest.net/ Official Minetest docs: https://minetest.gitlab.io/minetest/ Developer Wiki: http://dev.minetest.net/ (Unofficial) Minetest Modding Book by rubenwardy: https://rubenwardy.com/minetest_modding_book/","title":"Home"},{"location":"index.html#home","text":"Welcome to Minetest Community Docs! Here, you can find community-made documentations for Minetest, a free and open-source game(engine?).","title":"Home"},{"location":"index.html#contributing","text":"Feel free to make pull requests if you found any problem with the documentations. The source codes are written in Markdown so making changes should be easy. Changes will automatically become visible on the site shortly after being merged. You can also discuss about the documentations here .","title":"Contributing"},{"location":"index.html#useful-links","text":"Official Minetest website: http://www.minetest.net/ Official Minetest docs: https://minetest.gitlab.io/minetest/ Developer Wiki: http://dev.minetest.net/ (Unofficial) Minetest Modding Book by rubenwardy: https://rubenwardy.com/minetest_modding_book/","title":"Useful links"},{"location":"mods.html","text":"Mods Since Minetest by itself is just an engine, most if not all gameplay functionalities have to be implemented in mods. A mod is a self-contained collection of scripts, textures and other related files, which is loaded by and interfaces with Minetest. They are contained and ran solely on the server side while definitions and media files are automatically transferred to the client. Mod load path These paths are relative to the directories listed in Paths games/<gameid>/mods/ mods/ worlds/<worldname>/worldmods/ Modpacks Mods can be put in a subdirectory, if the parent directory, which otherwise should be a mod, contains a file named modpack.conf . The file is a key-value store of modpack details. name : The modpack name. Allows Minetest to determine the modpack name even if the folder is wrongly named. description : Description of mod to be shown in the Mods tab of the main menu. author : The author of the modpack. It only appears when downloaded from ContentDB. release : Ignore this: Should only ever be set by ContentDB, as it is an internal ID used to track versions. title : A human-readable title to address the modpack. Note To support 0.4.x, please also create an empty modpack.txt file. Mod directory structure mods \u251c\u2500\u2500 modname \u2502 \u251c\u2500\u2500 mod.conf \u2502 \u251c\u2500\u2500 screenshot.png \u2502 \u251c\u2500\u2500 settingtypes.txt \u2502 \u251c\u2500\u2500 init.lua \u2502 \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 textures \u2502 \u2502 \u251c\u2500\u2500 modname_stuff.png \u2502 \u2502 \u251c\u2500\u2500 modname_stuff_normal.png \u2502 \u2502 \u251c\u2500\u2500 modname_something_else.png \u2502 \u2502 \u251c\u2500\u2500 subfolder_foo \u2502 \u2502 \u2502 \u251c\u2500\u2500 modname_more_stuff.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 another_subfolder \u2502 \u2502 \u2514\u2500\u2500 bar_subfolder \u2502 \u251c\u2500\u2500 sounds \u2502 \u251c\u2500\u2500 media \u2502 \u251c\u2500\u2500 locale \u2502 \u2514\u2500\u2500 <custom data> \u2514\u2500\u2500 another modname The location of this directory can be fetched by using minetest.get_modpath(modname) . mod.conf A Settings file that provides meta information about the mod. name : The mod name. Allows Minetest to determine the mod name even if the folder is wrongly named. description : Description of mod to be shown in the Mods tab of the main menu. depends : A comma separated list of dependencies. These are mods that must be loaded before this mod. optional_depends : A comma separated list of optional dependencies. Like a dependency, but no error if the mod doesn't exist. author : The author of the mod. It only appears when downloaded from ContentDB. release : Ignore this: Should only ever be set by ContentDB, as it is an internal ID used to track versions. title : A human-readable title to address the mod. Note To support 0.4.x, please also provide depends.txt. screenshot.png A screenshot shown in the mod manager within the main menu. It should have an aspect ratio of 3:2 and a minimum size of 300\u00d7200 pixels. depends.txt This file is used if there are no dependencies in mod.conf. List of mods that have to be loaded before loading this mod. A single line contains a single modname. Optional dependencies can be defined by appending a question mark to a single modname. This means that if the specified mod is missing, it does not prevent this mod from being loaded. Warning Deprecated: you should use mod.conf instead. description.txt This file is used if there is no description in mod.conf. A file containing a description to be shown in the Mods tab of the main menu. Warning Deprecated: you should use mod.conf instead. settingtypes.txt The format is documented in builtin/settingtypes.txt . It is parsed by the main menu settings dialogue to list mod-specific settings in the \"Mods\" category. init.lua The main Lua script. Running this script should register everything it wants to register. Subsequent execution depends on minetest calling the registered callbacks. Tip minetest.settings can be used to read custom or existing settings at load time, if necessary. (See Settings ) textures , sounds , media , models , locale Media files (textures, sounds, whatever) that will be transferred to the client and will be available for use by the mod and translation files for the clients (see [Translations]). It is suggested to use the folders for the purpous they are thought for, eg. put textures into textures , translation files into locale , models for entities or meshnodes into models et cetera. These folders and subfolders can contain subfolders. Subfolders with names starting with _ or . are ignored. If a subfolder contains a media file with the same name as a media file in one of its parents, the parent's file is used. Although it is discouraged, a mod can overwrite a media file of any mod that it depends on by supplying a file with an equal name. Naming conventions Registered names should generally be in this format: modname:<whatever> <whatever> can have these characters: a-zA-Z0-9_ This is to prevent conflicting names from corrupting maps and is enforced by the mod loader. Registered names can be overridden by prefixing the name with : . This can be used for overriding the registrations of some other mod. The : prefix can also be used for maintaining backwards compatibility. Example In the mod experimental , there is the ideal item/node/entity name tnt . So the name should be experimental:tnt . Any mod can redefine experimental:tnt by using the name :experimental:tnt when registering it. That mod is required to have experimental as a dependency.","title":"Mods"},{"location":"mods.html#mods","text":"Since Minetest by itself is just an engine, most if not all gameplay functionalities have to be implemented in mods. A mod is a self-contained collection of scripts, textures and other related files, which is loaded by and interfaces with Minetest. They are contained and ran solely on the server side while definitions and media files are automatically transferred to the client.","title":"Mods"},{"location":"mods.html#mod-load-path","text":"These paths are relative to the directories listed in Paths games/<gameid>/mods/ mods/ worlds/<worldname>/worldmods/","title":"Mod load path"},{"location":"mods.html#modpacks","text":"Mods can be put in a subdirectory, if the parent directory, which otherwise should be a mod, contains a file named modpack.conf . The file is a key-value store of modpack details. name : The modpack name. Allows Minetest to determine the modpack name even if the folder is wrongly named. description : Description of mod to be shown in the Mods tab of the main menu. author : The author of the modpack. It only appears when downloaded from ContentDB. release : Ignore this: Should only ever be set by ContentDB, as it is an internal ID used to track versions. title : A human-readable title to address the modpack. Note To support 0.4.x, please also create an empty modpack.txt file.","title":"Modpacks"},{"location":"mods.html#mod-directory-structure","text":"mods \u251c\u2500\u2500 modname \u2502 \u251c\u2500\u2500 mod.conf \u2502 \u251c\u2500\u2500 screenshot.png \u2502 \u251c\u2500\u2500 settingtypes.txt \u2502 \u251c\u2500\u2500 init.lua \u2502 \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 textures \u2502 \u2502 \u251c\u2500\u2500 modname_stuff.png \u2502 \u2502 \u251c\u2500\u2500 modname_stuff_normal.png \u2502 \u2502 \u251c\u2500\u2500 modname_something_else.png \u2502 \u2502 \u251c\u2500\u2500 subfolder_foo \u2502 \u2502 \u2502 \u251c\u2500\u2500 modname_more_stuff.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 another_subfolder \u2502 \u2502 \u2514\u2500\u2500 bar_subfolder \u2502 \u251c\u2500\u2500 sounds \u2502 \u251c\u2500\u2500 media \u2502 \u251c\u2500\u2500 locale \u2502 \u2514\u2500\u2500 <custom data> \u2514\u2500\u2500 another","title":"Mod directory structure"},{"location":"mods.html#modname","text":"The location of this directory can be fetched by using minetest.get_modpath(modname) .","title":"modname"},{"location":"mods.html#modconf","text":"A Settings file that provides meta information about the mod. name : The mod name. Allows Minetest to determine the mod name even if the folder is wrongly named. description : Description of mod to be shown in the Mods tab of the main menu. depends : A comma separated list of dependencies. These are mods that must be loaded before this mod. optional_depends : A comma separated list of optional dependencies. Like a dependency, but no error if the mod doesn't exist. author : The author of the mod. It only appears when downloaded from ContentDB. release : Ignore this: Should only ever be set by ContentDB, as it is an internal ID used to track versions. title : A human-readable title to address the mod. Note To support 0.4.x, please also provide depends.txt.","title":"mod.conf"},{"location":"mods.html#screenshotpng","text":"A screenshot shown in the mod manager within the main menu. It should have an aspect ratio of 3:2 and a minimum size of 300\u00d7200 pixels.","title":"screenshot.png"},{"location":"mods.html#dependstxt","text":"This file is used if there are no dependencies in mod.conf. List of mods that have to be loaded before loading this mod. A single line contains a single modname. Optional dependencies can be defined by appending a question mark to a single modname. This means that if the specified mod is missing, it does not prevent this mod from being loaded. Warning Deprecated: you should use mod.conf instead.","title":"depends.txt"},{"location":"mods.html#descriptiontxt","text":"This file is used if there is no description in mod.conf. A file containing a description to be shown in the Mods tab of the main menu. Warning Deprecated: you should use mod.conf instead.","title":"description.txt"},{"location":"mods.html#settingtypestxt","text":"The format is documented in builtin/settingtypes.txt . It is parsed by the main menu settings dialogue to list mod-specific settings in the \"Mods\" category.","title":"settingtypes.txt"},{"location":"mods.html#initlua","text":"The main Lua script. Running this script should register everything it wants to register. Subsequent execution depends on minetest calling the registered callbacks. Tip minetest.settings can be used to read custom or existing settings at load time, if necessary. (See Settings )","title":"init.lua"},{"location":"mods.html#textures-sounds-media-models-locale","text":"Media files (textures, sounds, whatever) that will be transferred to the client and will be available for use by the mod and translation files for the clients (see [Translations]). It is suggested to use the folders for the purpous they are thought for, eg. put textures into textures , translation files into locale , models for entities or meshnodes into models et cetera. These folders and subfolders can contain subfolders. Subfolders with names starting with _ or . are ignored. If a subfolder contains a media file with the same name as a media file in one of its parents, the parent's file is used. Although it is discouraged, a mod can overwrite a media file of any mod that it depends on by supplying a file with an equal name.","title":"textures, sounds, media, models, locale"},{"location":"mods.html#naming-conventions","text":"Registered names should generally be in this format: modname:<whatever> <whatever> can have these characters: a-zA-Z0-9_ This is to prevent conflicting names from corrupting maps and is enforced by the mod loader. Registered names can be overridden by prefixing the name with : . This can be used for overriding the registrations of some other mod. The : prefix can also be used for maintaining backwards compatibility. Example In the mod experimental , there is the ideal item/node/entity name tnt . So the name should be experimental:tnt . Any mod can redefine experimental:tnt by using the name :experimental:tnt when registering it. That mod is required to have experimental as a dependency.","title":"Naming conventions"},{"location":"paths.html","text":"Paths Minetest have paths for locating games, mods, texture packs, etc. and they vary depending on the operating system you use. This page contain user paths and shared paths(also referred to as $path_user and $path_share respectively) that Minetest can use depending on how you start it. RUN_IN_PLACE=1 (default for Windows release and local build) $path_user : <build directory> 1 2 $path_share : <build directory> 1 2 RUN_IN_PLACE=0 : (default for system-wide installation on Linux) $path_share : Linux: /usr/share/minetest Windows: <install directory>/minetest-x.x.x $path_user : Linux: $HOME/.minetest Windows: C:/users/<user>/AppData/minetest (maybe) Todo Confirm user path for RUN_IN_PLACE=0 on Windows. If you downloaded Minetest for Windows, <build directory> refers to the directory that Minetest comes in. For example, minetest-5.4.1-win64 . \u21a9 \u21a9 If you build Minetest manually, <build directory> is the directory you called CMake from. This will usually be the top level project directory. \u21a9 \u21a9","title":"Paths"},{"location":"paths.html#paths","text":"Minetest have paths for locating games, mods, texture packs, etc. and they vary depending on the operating system you use. This page contain user paths and shared paths(also referred to as $path_user and $path_share respectively) that Minetest can use depending on how you start it. RUN_IN_PLACE=1 (default for Windows release and local build) $path_user : <build directory> 1 2 $path_share : <build directory> 1 2 RUN_IN_PLACE=0 : (default for system-wide installation on Linux) $path_share : Linux: /usr/share/minetest Windows: <install directory>/minetest-x.x.x $path_user : Linux: $HOME/.minetest Windows: C:/users/<user>/AppData/minetest (maybe) Todo Confirm user path for RUN_IN_PLACE=0 on Windows. If you downloaded Minetest for Windows, <build directory> refers to the directory that Minetest comes in. For example, minetest-5.4.1-win64 . \u21a9 \u21a9 If you build Minetest manually, <build directory> is the directory you called CMake from. This will usually be the top level project directory. \u21a9 \u21a9","title":"Paths"},{"location":"texture_packs.html","text":"Texture packs Texture packs allows you to replace textures provided by mods with your own textures. They are placed into the textures directory in your Minetest path(see Paths ). Directory structure textures |-- Texture Pack | |-- texture_pack.conf | |-- screenshot.png | |-- description.txt | |-- override.txt | |-- your_texture_1.png | |-- your_texture_2.png `-- Another Texture Pack Texture Pack This is a directory containing the entire contents of a single texture pack. It can be chosen more or less freely and will also become the name of the texture pack. The name must not be \u201cbase\u201d. texture_pack.conf A key-value config file with the following keys: title - human readable title description - short description, shown in the content tab description.txt A file containing a short description of the texture pack to be shown in the content tab. Warning Deprecated , you should use texture_pack.conf instead. screenshot.png A preview image showing an in-game screenshot of this texture pack; it will be shown in the texture packs tab. It should have an aspect ratio of 3:2 and a minimum size of 300\u00d7200 pixels. your_texture_1.png , your_texture_2.png , etc. Any other PNG files will be interpreted as textures. They must have the same names as the textures they are supposed to override. For example, to override the apple texture of Minetest Game, add a PNG file named default_apple.png . The custom textures do not necceessarily require the same size as their originals, but this might be required for a few particular textures. When unsure, just test your texture pack in-game. override.txt See Texture Overrides Texture modifiers Todo Lua API: Texture modifiers Special textures These texture names are hardcoded into the engine but can also be overwritten by texture packs. All existing fallback textures can be found in the directory textures/base/pack . Gameplay textures bubble.png : the bubble texture when the player is drowning (default size: 12\u00d712) bubble_gone.png : like bubble.png , but denotes lack of breath (transparent by default, same size as bubble.png) crack_anylength.png : node overlay texture when digging crosshair.png the crosshair texture in the center of the screen. The settings crosshair_color and crosshair_alpha are used to create a cross when no texture is found. object_crosshair.png the crosshair seen when pointing at an object. The settings crosshair_color and crosshair_alpha are used to create a cross when no texture is found. halo.png : used for the node highlighting mesh heart.png : used to display the health points of the player (default size: 12\u00d712) heart_gone.png : like heart.png , but denotes lack of health points (transparent by default, same size as heart.png) minimap_mask_round.png : round minimap mask, white gets replaced by the map minimap_mask_square.png : mask used for the square minimap minimap_overlay_round.png : overlay texture for the round minimap minimap_overlay_square.png : overlay texture for the square minimap no_texture_airlike.png : fallback inventory image for airlike nodes object_marker_red.png : texture for players on the minimap player_marker.png : texture for the own player on the square minimap player.png : front texture of the 2D upright sprite player player_back.png : back texture of the 2D upright sprite player progress_bar.png : foreground texture of the loading screen's progress bar progress_bar_bg.png : background texture of the loading screen's progress bar moon.png : texture of the moon. Default texture is generated by Minetest moon_tonemap.png : tonemap to be used when moon.png was found sun.png : texture of the sun. Default texture is generated by Minetest sun_tonemap.png : tonemap to be used when sun.png was found sunrisebg.png : shown sky texture when the sun rises smoke_puff.png : texture used when an object died by punching unknown_item.png : shown texture when an item definition was not found unknown_node.png : shown texture when a node definition was not found unknown_object.png : shown texture when an entity definition was not found wieldhand.png : texture of the wieldhand Note The default textures of player.png , player_back.png and wieldhand.png are placeholders intended to be overwritten by the game. Mainmenu textures menu_bg.png : used as mainmenu background when the clouds are disabled menu_header.png : header texture when no texture pack is selected no_screenshot.png texture when no screenshot was found for a texture pack or mod server_flags_creative.png : icon for creative servers server_flags_damage.png : icon for enabled damage on servers server_flags_favorite.png : icon for your favorite servers server_flags_pvp.png : icon for enabled PvP on servers Android textures down_arrow.png left_arrow.png right_arrow.png up_arrow.png drop_btn.png fast_btn.png fly_btn.png jump_btn.png noclip_btn.png camera_btn.png chat_btn.png inventory_btn.png rangeview_btn.png debug_btn.png gear_icon.png rare_controls.png Texture Overrides You can override the textures of nodes and items from a texture pack using texture overrides. To do this, create one or more files in a texture pack called override.txt Each line in an override.txt file is a rule. It consists of itemname target texture For example, default:dirt_with_grass sides default_stone.png or default:sword_steel inventory my_steel_sword.png You can list multiple targets on one line as a comma-separated list: default:tree top,bottom my_special_tree.png You can use texture modifiers, as usual: default:dirt_with_grass sides default_stone.png^[brighten Finally, if a line is empty or starts with '#' it will be considered a comment and not read as a rule. You can use this to better organize your override.txt files. Here are targets you can choose from: target behavior left x- face right x+ face front z- face back z+ face top y+ face bottom y- face sides x-, x+, z-, z+ faces all All faces. You can also use '*' instead of 'all'. special1 The first entry in the special_tiles list special2 The second entry in the special_tiles list special3 The third entry in the special_tiles list special4 The fourth entry in the special_tiles list special5 The fifth entry in the special_tiles list special6 The sixth entry in the special_tiles list inventory The inventory texture wield The texture used when held by the player Nodes support all targets, but other items only support 'inventory' and 'wield'. Using the special targets The special* targets only apply to specific drawtypes: flowingliquid : special1 sets the top texture, special2 sets the side texture allfaces_optional : special1 is used by simple mode, see below glasslike_framed : When containing a liquid, special1 sets the liquid texture glasslike_framed_optional : Same as glasslike_framed plantlike_rooted : special1 sets the plant's texture Designing leaves textures for the leaves rendering options Minetest has three modes for rendering leaves nodes if the node has the allfaces_optional drawtype. Fancy Uses the texture specified in the tiles nodedef field. The texture should have some transparent pixels and be in the RGBA format so that the transparent pixels can have color information. Faces of every leaves node are rendered even if they are inside a solid volume of leaves; this gives a dense appearance. Opaque Uses the texture specified in tiles but makes it opaque by converting each transparent pixel into an opaque pixel that uses the color information of that transparent pixel. Due to this the tiles texture format must be RGBA not 'indexed alpha' to allow each transparent pixel to have color information. The colors of the transparent pixels should be set for a good appearance in opaque mode. This can be done by painting the pixels the desired colors then erasing them. Then when saving the texture, use the 'save color information from transparent pixels' option (or equivalent). Simple Uses the texture specified in the special_tiles nodedef field if it exists, if not, the tiles texture. The special_tiles texture should have fewer transparent pixels than the tiles texture and be in the 'indexed alpha' format. This mode is between the other two in terms of appearance and rendering load. The nodes are rendered using the glasslike drawtype, only showing the surface faces for any solid volume of leaves, not the internal faces. Due to this the tiles texture might appear lacking in density, so optionally a special_tiles texture can be used to provide a texture with fewer transparent pixels for a denser appearance.","title":"Texture packs"},{"location":"texture_packs.html#texture-packs","text":"Texture packs allows you to replace textures provided by mods with your own textures. They are placed into the textures directory in your Minetest path(see Paths ).","title":"Texture packs"},{"location":"texture_packs.html#directory-structure","text":"textures |-- Texture Pack | |-- texture_pack.conf | |-- screenshot.png | |-- description.txt | |-- override.txt | |-- your_texture_1.png | |-- your_texture_2.png `-- Another Texture Pack","title":"Directory structure"},{"location":"texture_packs.html#texture-pack","text":"This is a directory containing the entire contents of a single texture pack. It can be chosen more or less freely and will also become the name of the texture pack. The name must not be \u201cbase\u201d.","title":"Texture Pack"},{"location":"texture_packs.html#texture_packconf","text":"A key-value config file with the following keys: title - human readable title description - short description, shown in the content tab","title":"texture_pack.conf"},{"location":"texture_packs.html#descriptiontxt","text":"A file containing a short description of the texture pack to be shown in the content tab. Warning Deprecated , you should use texture_pack.conf instead.","title":"description.txt"},{"location":"texture_packs.html#screenshotpng","text":"A preview image showing an in-game screenshot of this texture pack; it will be shown in the texture packs tab. It should have an aspect ratio of 3:2 and a minimum size of 300\u00d7200 pixels.","title":"screenshot.png"},{"location":"texture_packs.html#your_texture_1png-your_texture_2png-etc","text":"Any other PNG files will be interpreted as textures. They must have the same names as the textures they are supposed to override. For example, to override the apple texture of Minetest Game, add a PNG file named default_apple.png . The custom textures do not necceessarily require the same size as their originals, but this might be required for a few particular textures. When unsure, just test your texture pack in-game.","title":"your_texture_1.png, your_texture_2.png, etc."},{"location":"texture_packs.html#overridetxt","text":"See Texture Overrides","title":"override.txt"},{"location":"texture_packs.html#texture-modifiers","text":"Todo Lua API: Texture modifiers","title":"Texture modifiers"},{"location":"texture_packs.html#special-textures","text":"These texture names are hardcoded into the engine but can also be overwritten by texture packs. All existing fallback textures can be found in the directory textures/base/pack .","title":"Special textures"},{"location":"texture_packs.html#gameplay-textures","text":"bubble.png : the bubble texture when the player is drowning (default size: 12\u00d712) bubble_gone.png : like bubble.png , but denotes lack of breath (transparent by default, same size as bubble.png) crack_anylength.png : node overlay texture when digging crosshair.png the crosshair texture in the center of the screen. The settings crosshair_color and crosshair_alpha are used to create a cross when no texture is found. object_crosshair.png the crosshair seen when pointing at an object. The settings crosshair_color and crosshair_alpha are used to create a cross when no texture is found. halo.png : used for the node highlighting mesh heart.png : used to display the health points of the player (default size: 12\u00d712) heart_gone.png : like heart.png , but denotes lack of health points (transparent by default, same size as heart.png) minimap_mask_round.png : round minimap mask, white gets replaced by the map minimap_mask_square.png : mask used for the square minimap minimap_overlay_round.png : overlay texture for the round minimap minimap_overlay_square.png : overlay texture for the square minimap no_texture_airlike.png : fallback inventory image for airlike nodes object_marker_red.png : texture for players on the minimap player_marker.png : texture for the own player on the square minimap player.png : front texture of the 2D upright sprite player player_back.png : back texture of the 2D upright sprite player progress_bar.png : foreground texture of the loading screen's progress bar progress_bar_bg.png : background texture of the loading screen's progress bar moon.png : texture of the moon. Default texture is generated by Minetest moon_tonemap.png : tonemap to be used when moon.png was found sun.png : texture of the sun. Default texture is generated by Minetest sun_tonemap.png : tonemap to be used when sun.png was found sunrisebg.png : shown sky texture when the sun rises smoke_puff.png : texture used when an object died by punching unknown_item.png : shown texture when an item definition was not found unknown_node.png : shown texture when a node definition was not found unknown_object.png : shown texture when an entity definition was not found wieldhand.png : texture of the wieldhand Note The default textures of player.png , player_back.png and wieldhand.png are placeholders intended to be overwritten by the game.","title":"Gameplay textures"},{"location":"texture_packs.html#mainmenu-textures","text":"menu_bg.png : used as mainmenu background when the clouds are disabled menu_header.png : header texture when no texture pack is selected no_screenshot.png texture when no screenshot was found for a texture pack or mod server_flags_creative.png : icon for creative servers server_flags_damage.png : icon for enabled damage on servers server_flags_favorite.png : icon for your favorite servers server_flags_pvp.png : icon for enabled PvP on servers","title":"Mainmenu textures"},{"location":"texture_packs.html#android-textures","text":"down_arrow.png left_arrow.png right_arrow.png up_arrow.png drop_btn.png fast_btn.png fly_btn.png jump_btn.png noclip_btn.png camera_btn.png chat_btn.png inventory_btn.png rangeview_btn.png debug_btn.png gear_icon.png rare_controls.png","title":"Android textures"},{"location":"texture_packs.html#texture-overrides","text":"You can override the textures of nodes and items from a texture pack using texture overrides. To do this, create one or more files in a texture pack called override.txt Each line in an override.txt file is a rule. It consists of itemname target texture For example, default:dirt_with_grass sides default_stone.png or default:sword_steel inventory my_steel_sword.png You can list multiple targets on one line as a comma-separated list: default:tree top,bottom my_special_tree.png You can use texture modifiers, as usual: default:dirt_with_grass sides default_stone.png^[brighten Finally, if a line is empty or starts with '#' it will be considered a comment and not read as a rule. You can use this to better organize your override.txt files. Here are targets you can choose from: target behavior left x- face right x+ face front z- face back z+ face top y+ face bottom y- face sides x-, x+, z-, z+ faces all All faces. You can also use '*' instead of 'all'. special1 The first entry in the special_tiles list special2 The second entry in the special_tiles list special3 The third entry in the special_tiles list special4 The fourth entry in the special_tiles list special5 The fifth entry in the special_tiles list special6 The sixth entry in the special_tiles list inventory The inventory texture wield The texture used when held by the player Nodes support all targets, but other items only support 'inventory' and 'wield'.","title":"Texture Overrides"},{"location":"texture_packs.html#using-the-special-targets","text":"The special* targets only apply to specific drawtypes: flowingliquid : special1 sets the top texture, special2 sets the side texture allfaces_optional : special1 is used by simple mode, see below glasslike_framed : When containing a liquid, special1 sets the liquid texture glasslike_framed_optional : Same as glasslike_framed plantlike_rooted : special1 sets the plant's texture","title":"Using the special targets"},{"location":"texture_packs.html#designing-leaves-textures-for-the-leaves-rendering-options","text":"Minetest has three modes for rendering leaves nodes if the node has the allfaces_optional drawtype.","title":"Designing leaves textures for the leaves rendering options"},{"location":"texture_packs.html#fancy","text":"Uses the texture specified in the tiles nodedef field. The texture should have some transparent pixels and be in the RGBA format so that the transparent pixels can have color information. Faces of every leaves node are rendered even if they are inside a solid volume of leaves; this gives a dense appearance.","title":"Fancy"},{"location":"texture_packs.html#opaque","text":"Uses the texture specified in tiles but makes it opaque by converting each transparent pixel into an opaque pixel that uses the color information of that transparent pixel. Due to this the tiles texture format must be RGBA not 'indexed alpha' to allow each transparent pixel to have color information. The colors of the transparent pixels should be set for a good appearance in opaque mode. This can be done by painting the pixels the desired colors then erasing them. Then when saving the texture, use the 'save color information from transparent pixels' option (or equivalent).","title":"Opaque"},{"location":"texture_packs.html#simple","text":"Uses the texture specified in the special_tiles nodedef field if it exists, if not, the tiles texture. The special_tiles texture should have fewer transparent pixels than the tiles texture and be in the 'indexed alpha' format. This mode is between the other two in terms of appearance and rendering load. The nodes are rendered using the glasslike drawtype, only showing the surface faces for any solid volume of leaves, not the internal faces. Due to this the tiles texture might appear lacking in density, so optionally a special_tiles texture can be used to provide a texture with fewer transparent pixels for a denser appearance.","title":"Simple"},{"location":"Lua%20API/settings.html","text":"Settings An interface to read config files in the format of minetest.conf . It can be created via Settings(filename) . Methods get(key) : returns a value get_bool(key, [default]) : returns a boolean default is the value returned if key is not found. Returns nil if key is not found and default not specified. get_np_group(key) : returns a NoiseParams table get_flags(key) : Returns {flag = true/false, ...} according to the set flags. Is currently limited to mapgen flags mg_flags and mapgen-specific flags like mgv5_spflags . set(key, value) Setting names can't contain whitespace or any of =\"{}# . Setting values can't contain the sequence \\n\"\"\" . Setting names starting with \"secure.\" can't be set on the main settings object ( minetest.settings ). set_bool(key, value) See documentation for set() above. set_np_group(key, value) value is a NoiseParams table. Also, see documentation for set() above. remove(key) : returns a boolean ( true for success) get_names() : returns {key1,...} write() : returns a boolean ( true for success) Writes changes to file. to_table() : returns {[key1]=value1,...} Format The settings have the format key = value . Example: foo = example text bar = \"\"\" Multiline value \"\"\"","title":"Settings"},{"location":"Lua%20API/settings.html#settings","text":"An interface to read config files in the format of minetest.conf . It can be created via Settings(filename) .","title":"Settings"},{"location":"Lua%20API/settings.html#methods","text":"get(key) : returns a value get_bool(key, [default]) : returns a boolean default is the value returned if key is not found. Returns nil if key is not found and default not specified. get_np_group(key) : returns a NoiseParams table get_flags(key) : Returns {flag = true/false, ...} according to the set flags. Is currently limited to mapgen flags mg_flags and mapgen-specific flags like mgv5_spflags . set(key, value) Setting names can't contain whitespace or any of =\"{}# . Setting values can't contain the sequence \\n\"\"\" . Setting names starting with \"secure.\" can't be set on the main settings object ( minetest.settings ). set_bool(key, value) See documentation for set() above. set_np_group(key, value) value is a NoiseParams table. Also, see documentation for set() above. remove(key) : returns a boolean ( true for success) get_names() : returns {key1,...} write() : returns a boolean ( true for success) Writes changes to file. to_table() : returns {[key1]=value1,...}","title":"Methods"},{"location":"Lua%20API/settings.html#format","text":"The settings have the format key = value . Example: foo = example text bar = \"\"\" Multiline value \"\"\"","title":"Format"}]}